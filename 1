import streamlit as st
import sqlite3
import pandas as pd

# Import the sqlite3 module
import sqlite3

# Connect to the database
conn = sqlite3.connect('railways.db')

# Set the current page
current_page = 'Login or Sign up'

# Create a cursor object
c = conn.cursor()

def create_db():
    c.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)")
    c.execute("CREATE TABLE IF NOT EXISTS employees (employee_id TEXT, password TEXT, designation TEXT)")
    c.execute("CREATE TABLE IF NOT EXISTS trains (train_number TEXT, train_name TEXT, start_destination TEXT, end_destination TEXT)")

create_db()

# Add train
def add_train(train_number, train_name, start_destination, end_destination):
    c.execute("INSERT INTO trains (train_number, train_name, start_destination, end_destination) VALUES (?, ?, ?, ?)",
              (train_number, train_name, start_destination, end_destination))
    conn.commit()

# Create seat table for a train
def create_seat_table(train_number):
    c.execute(f"""CREATE TABLE IF NOT EXISTS seats_{train_number} (
                seat_number INTEGER PRIMARY KEY,
                seat_type TEXT,
                booked INTEGER,
                passenger_name TEXT,
                passenger_age INTEGER,
                passenger_gender TEXT)""")

    for i in range(1, 51):
        val = categorize_seat(i)
        c.execute(f"INSERT INTO seats_{train_number} (seat_number, seat_type, booked, passenger_name, passenger_age, passenger_gender) VALUES (?, ?, ?, ?, ?, ?)",
                  (i, val, 0, "", 0, ""))

    conn.commit()

# Allocate next available seat
def allocate_next_available_seat(train_number, seat_type):
    seat_query = c.execute(f"SELECT seat_number FROM seats_{train_number} WHERE booked=0 AND seat_type=? ORDER BY seat_number ASC", (seat_type,))
    result = seat_query.fetchone()

    if result:
        return result[0]

# Categorize seat in train
def categorize_seat(seat_number):
    if seat_number % 10 in [0, 4, 5, 9]:
        return "Window"
    elif seat_number % 10 in [2, 3, 6, 7]:
        return "Aisle"
    else:
        return "Middle"

# View seats of a train
def view_seats(train_number):
    train_query = c.execute("SELECT * FROM trains WHERE train_number=?", (train_number,))
    train_data = train_query.fetchone()

    if train_data:
        seat_query = c.execute(f"SELECT 'Number: ' || seat_number AS Seat_Number, '\n Type: ' || seat_type AS Seat_Type, '\n Name: ' || passenger_name AS Passenger_Name, '\n Age: ' || passenger_age AS Passenger_Age, '\n Gender: ' || passenger_gender AS Passenger_Gender, booked FROM seats_{train_number} ORDER BY seat_number ASC")
        result = seat_query.fetchall()

        if result:
            st.dataframe(data=result)

# Book tickets for a train
def book_tickets(train_number, passenger_name, passenger_age, passenger_gender, seat_type):
    train_query = c.execute("SELECT * FROM trains WHERE train_number=?", (train_number,))
    train_data = train_query.fetchone()

    if train_data:
        seat_number = allocate_next_available_seat(train_number, seat_type)

        if seat_number:
            c.execute(f"UPDATE seats_{train_number} SET booked=1, seat_type=?, passenger_name=?, passenger_age=?, passenger_gender=? WHERE seat_number=?",
                      (seat_type, passenger_name, passenger_age, passenger_gender, seat_number))
            conn.commit()
            st.success("BOOKED SUCCESSFULLY")

# Cancel tickets for a train
def cancel_tickets(train_number, seat_number):
    train_query = c.execute("SELECT * FROM trains WHERE train_number=?", (train_number,))
    train_data = train_query.fetchone()

    if train_data:
        c.execute(f"UPDATE seats_{train_number} SET booked=0, passenger_name='', passenger_age=0, passenger_gender='' WHERE seat_number=?", (seat_number,))
        conn.commit()
        st.success("CANCELLED SUCCESSFULLY")

# Delete a train
def delete_train(train_number, departure_date):
    train_query = c.execute("SELECT * FROM trains WHERE train_number=?", (train_number,))
    train_data = train_query.fetchone()

    if train_data:
        c.execute("DROP TABLE IF EXISTS seats_" + train_number)
        c.execute("DELETE FROM trains WHERE train_number=? AND departure_date=?", (train_number, departure_date))
        conn.commit()
        st.success("TRAIN DELETED SUCCESSFULLY")

def train_functions():
    st.title("Train Administration")
    functions = st.sidebar.selectable("Select Train Function", ["Add Train", "View Trains", "Book Tickets", "Cancel Tickets", "View Seats", "Delete Train"])

    if functions == "Add Train":
        st.header("Add New Train")
        with st.form(key='new_train_details'):
            train_number = st.text_input("Train Number")
            train_name = st.text_input("Train Name")
            start_destination = st.text_input("Start Destination")
            end_destination = st.text_input("End Destination")
            submitted = st.form_submit_button("Add Train")
        if submitted and train_name != "" and train_number != "" and start_destination != "" and end_destination != "":
            add_train(train_number, train_name, start_destination, end_destination)
            create_seat_table(train_number)
            st.success("TRAIN ADDED SUCCESSFULLY")

    elif functions == "View Trains":
        st.title("View All Trains")
        train_query = c.execute("SELECT * FROM trains")
        trains = train_query.fetchall()
        if trains:
            st.table(trains)
        else:
            st.info("No trains available.")

    elif functions == "Book Tickets":
        st.title("Book Train Tickets")
        train_number = st.text_input("Enter Train Number")
        seat_type = st.selectable("Seat Type", ["Aisle", "Middle", "Window"])
        passenger_name = st.text_input("Passenger Name")
        passenger_age = st.number_input("Passenger Age", min_value=1)
        passenger_gender = st.selectable("Passenger Gender", ["Male", "Female"])
        if st.button("Book Ticket"):
            if train_number and passenger_name and passenger_gender and passenger_age:
                book_tickets(train_number, passenger_name, passenger_age, passenger_gender, seat_type)

    elif functions == "Cancel Tickets":
        st.title("Cancel Train Tickets")
        train_number = st.text_input("Enter Train Number")
        seat_number = st.number_input("Enter Seat Number")
        if st.button("Cancel Ticket"):
            if train_number and seat_number:
                cancel_tickets(train_number, seat_number)

    elif functions == "View Seats":
        st.title("View Seats")
        train_number = st.text_input("Enter Train Number")
        if st.button("Submit"):
            if train_number:
                view_seats(train_number)

    elif functions == "Delete Train":
        st.title("Delete Train")
        train_number = st.text_input("Enter Train Number")
        departure_date = st.date_input("Enter Departure Date")
        if st.button("Delete Train"):
            if train_number and departure_date:
                delete_train(train_number, departure_date)

# Run the train functions
train_functions()
